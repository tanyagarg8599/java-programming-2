=> 13.How you will check if a given Binary tree is a Binary search tree or not?
If a node is a left child, then its key and the keys of the nodes in its right subtree are less than its parent’s key.
If a node is a right child, then its key and the keys of the nodes in its left subtree are greater than its parent’s key.
#include <iostream>
#include <limits>
using namespace std;
struct Tree
{
	int data;
	Tree *left;
	Tree *right;
  Tree(int data) 
    { 
        this -> data = data; 
        left = NULL;
        right = NULL; 
    }     
};
bool isBST(Tree* node, int min, int max) {
	if (node == NULL)
		return true;
	
	if (node -> data < min)
		return false;
      if (node -> data > max)
		return false;
}
int main() {
  Tree *root = new Tree(6); 
  root -> left = new Tree(3); 
  root -> right = new Tree(9); 
  root -> left -> left = new Tree(1); 
  root -> left -> right = new Tree(5);
  root -> right -> left = new Tree(7);
  root -> right -> right = new Tree(11);
  int min = std::numeric_limits<int>::min();
  int max = std::numeric_limits<int>::max();
  if(isBST(root, min, max)){
    cout<<"This binary tree is a BST."<<endl;
  }
  else{
    cout<<"This binary tree is not a BST."<<endl;
  }
